#-------------------------------------------------------------------------
# AUTHOR: Harshitha Patnaik
# FILENAME: bagging_random_forest.py
# SPECIFICATION: calculating accuracy by base classifier, ensemble & random forest
# FOR: CS 5990- Assignment #4
# TIME SPENT: half a day
#-----------------------------------------------------------*/

#importing some Python libraries
from sklearn import tree
from sklearn.utils import resample
from sklearn.ensemble import RandomForestClassifier
import numpy as np

# Function to load data from file
def load_data(filepath):
    data = np.loadtxt(filepath, delimiter=',', dtype=int)
    return data

dbTraining = []
dbTest = []
X_training = []
y_training = []
classVotes = [] #this array will be used to count the votes of each classifier

#reading the training data from a csv file and populate dbTraining
dbTraining = load_data('optdigits.tra')

#reading the test data from a csv file and populate dbTest
dbTest = load_data('optdigits.tes')

#inititalizing the class votes for each test sample
classVotes = [np.zeros(10, dtype=int) for _ in range(len(dbTest))]

print("Started my base and ensemble classifier ...")

for k in range(20): #we will create 20 bootstrap samples here (k = 20). One classifier will be created for each bootstrap sample

  bootstrapSample = resample(dbTraining, n_samples=len(dbTraining), replace=True)

  #populate the values of X_training and y_training by using the bootstrapSample
  X_training = bootstrapSample[:, :-1]
  y_training = bootstrapSample[:, -1]

  #fitting the decision tree to the data
  clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth=None) #we will use a single decision tree without pruning it
  clf = clf.fit(X_training, y_training)

  for i, testSample in enumerate(dbTest):

      #make the classifier prediction for each test sample and update the corresponding index value in classVotes. For instance,
      # if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0].
      # Later, if your second base classifier predicted 3 for the first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0]
      # Later, if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,0] will change to classVotes[0,0,1,2,0,0,0,0,0,0]
      # this array will consolidate the votes of all classifier for all test samples
      class_predicted = clf.predict([testSample[:-1]])[0]
      classVotes[i][class_predicted] += 1

      if k == 0:  # for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy
          if class_predicted == testSample[-1]:
              classVotes[i][-1] += 1

  if k == 0:  # for only the first base classifier, print its accuracy here
      accuracy = np.mean([votes[-1] for votes in classVotes])
      print("Finished my base classifier (fast but relatively low accuracy) ...")
      print("My base classifier accuracy: " + str(accuracy))
      print("")

  #now, compare the final ensemble prediction (majority vote in classVotes) for each test sample with the ground truth label to calculate the accuracy of the ensemble classifier (all base classifiers together)
  ensemble_predictions = [np.argmax(votes[:-1]) for votes in classVotes]
  ensemble_accuracy = np.mean([ensemble_predictions[i] == dbTest[i, -1] for i in range(len(dbTest))])
  print(f"After classifier {k + 1}, ensemble accuracy is: {ensemble_accuracy}")

#printing the ensemble accuracy here
print("Finished my ensemble classifier (slow but higher accuracy) ...")
print("My ensemble accuracy: " + str(ensemble_accuracy))
print("")

print("Started Random Forest algorithm ...")

#Create a Random Forest Classifier
clf=RandomForestClassifier(n_estimators=20) #this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before

#Fit Random Forest to the training data
clf.fit(X_training,y_training)
# clf.fit(dbTraining[:, :-1], dbTraining[:, -1])


#make the Random Forest prediction for each test sample
class_predicted_rf = clf.predict(dbTest[:, :-1])

#compare the Random Forest prediction for each test sample with the ground truth label to calculate its accuracy
random_forest_accuracy = np.mean(class_predicted_rf == dbTest[:, -1])

#printing Random Forest accuracy here
print("Random Forest accuracy: " + str(random_forest_accuracy))
print("Finished Random Forest algorithm (much faster and higher accuracy!) ...")